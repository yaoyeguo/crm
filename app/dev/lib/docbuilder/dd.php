<?phpclass dev_docbuilder_dd{    public $__content = '';    public $__tables_outline = array();    public $__primary = array();    public function export(){        $this->export_database();    }    public function export_tables_outline() {        $out = "数据库词典\n\n\n";        $out .= "= 数据库tables列表 =\n";        $columns_title = array('Name', 'Comment');        $out .=$this->gen_table_list($columns_title, $this->__tables_outline)."\n\n";        return $out;    }    private function get_all_apps(){        $d = dir(APP_DIR);        while (false !== ($entry = $d->read())) {            if ($entry!='.' && $entry!='..') {                if (is_dir(APP_DIR.'/'.$entry)) {                    $apps[] = $entry;                                                    }            }        }        $d->close();        return $apps;    }    public function export_database() {        foreach($this->get_all_apps() as $app){            $this->__content .= $this->export_app_tables($app);        }        $this->__content = $this->export_tables_outline().$this->__content;    }    public function output(){        echo $this->__content;    }    private function export_table_header($table_name, $comment){        $table_name = str_replace('sdb_','',$table_name);        $out = "<a name=\"table-".$table_name."-define\"></a>\n## ".$table_name."\n> **".$comment."**\n\n";        return $out;    }    private function export_table_main($columns){        $this->__primary = array();        $out = "- 表结构\n\n";        $columns_title = array('ColumnName','Comment','Type','Not null','Default','Autoincrement');        foreach($columns as $cname=>$row){			if ($cname == 'disabled') {				$row_comment = '是否失效';			}elseif(!empty($row['comment'])) {                $row_comment = $row['comment'];            }elseif (!empty($row['label'])){                $row_comment = $row['label'];            }else{				$row_comment = $cname;			}            if (is_array($row['type'])) {                $row_comment_enum_describe = ' ';                                foreach($row['type'] as $e_k => $e_v) {                                        $row_comment_enum_describe .= $e_k.':'.$e_v.';';                }                $row_comment .= $row_comment_enum_describe;            }            $out_columns[] = array($cname                               ,$row_comment                               ,$row['realtype']                               ,$row['required']?'Y':'N'                               ,$row['default']                               ,$row['extra'] == 'auto_increment' ? 'Y':'N'                               );            if(isset($row['pkey'])){                $this->__primary['primary']['columns'][] = $cname;                $this->__primary['primary']['prefix'] = 'unique';            }        }        $out .= $this->gen_table($columns_title,$out_columns)."\n";        return $out;    }        private function export_table_index($indexes){        if (empty($indexes)) {            return;        }        $out = "- 索引\n\n";        $columns_title = array('Key name', 'Column names','Unique', 'Comment');        foreach($indexes as $index_name => $index){            $out_indexes[] = array(                                   $index_name,                                   implode($index['columns'], ', '),                                   $index['prefix'] == 'unique' ? 'Y' : 'N',                                   '',                                   );        }        $out .= $this->gen_table($columns_title, $out_indexes);        return $out;    }    private function export_app_header($app){        if (empty($app)) {            return;        }        $out = "<a name=\"app-".$app."-define\"></a>\n## app:".$app." tables";        return $out;    }        public function export_app_tables($app_id){        $exist_app = array();        foreach(kernel::single('base_application_dbtable')->detect($app_id) as $name=>$item){            $define = $item->load();                        if(!in_array($app_id,$exist_app)){                $exist_app[] = $app_id;                $out .= sprintf("%s\n\n",                                $this->export_app_header($app_id));            }            $export_table_header = $this->export_table_header($item->real_table_name(), $define['comment']);            $export_table_main = $this->export_table_main($define['columns']);            $index = $this->__primary ? array_merge($this->__primary,$define['index']) : $define['index'];            $export_index = $this->export_table_index($index);            $out .= sprintf("%s%s%s\n",                           $export_table_header,                           $export_table_main,                           $export_index);            $this->__tables_outline[] = array(                                            'app' => $app_id,                                            'name' => $item->real_table_name(),                                            'comment' => $define['comment']);        }        return $out;    }            function gen_table_list($titles,$rows){        $out  = '';        $out .= '|| '.implode(' | ',$titles)." ||\n";        $exist_app = array();        foreach($rows as $row){            if(!in_array($row['app'],$exist_app)){                $exist_app[] = $row['app'];                $out .=  '- [APP:'.$row['app']."](#app-".$row['app']."-define)\n";            }            $name = str_replace('sdb_','',$row['name']);            $out .=  '  - ['.$name."(".$row['comment'].")](#table-".$name."-define)\n";            unset($row['app']);        }        return $out;    }       function gen_table($titles,$rows){        $out  = '';        $out .= '| '.implode(' | ',$titles)." |\n";        for($i=1; $i<=count($titles);$i++){            $title2[] = '-------------';        }        $out .= '| '.implode(' | ',$title2)." |\n";                foreach($rows as $row){            $out .=  '| '.implode(' | ',$row)." |\n";        }        return $out;    }}